/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Sensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5570443809319384419L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"velocity\",\"type\":\"float\",\"default\":0.0},{\"name\":\"externalTemperature\",\"type\":\"float\",\"default\":0.0},{\"name\":\"accelerometer\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}],\"default\":null},{\"name\":\"magneticField\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sensor> ENCODER =
      new BinaryMessageEncoder<Sensor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sensor> DECODER =
      new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Sensor> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Sensor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Sensor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sensor to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sensor from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sensor instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sensor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public float velocity;
  @Deprecated public float externalTemperature;
  @Deprecated public java.util.List<java.lang.Float> accelerometer;
  @Deprecated public java.util.List<java.lang.Float> magneticField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sensor() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param velocity The new value for velocity
   * @param externalTemperature The new value for externalTemperature
   * @param accelerometer The new value for accelerometer
   * @param magneticField The new value for magneticField
   */
  public Sensor(java.lang.CharSequence id, java.lang.Float velocity, java.lang.Float externalTemperature, java.util.List<java.lang.Float> accelerometer, java.util.List<java.lang.Float> magneticField) {
    this.id = id;
    this.velocity = velocity;
    this.externalTemperature = externalTemperature;
    this.accelerometer = accelerometer;
    this.magneticField = magneticField;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return velocity;
    case 2: return externalTemperature;
    case 3: return accelerometer;
    case 4: return magneticField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: velocity = (java.lang.Float)value$; break;
    case 2: externalTemperature = (java.lang.Float)value$; break;
    case 3: accelerometer = (java.util.List<java.lang.Float>)value$; break;
    case 4: magneticField = (java.util.List<java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return The value of the 'velocity' field.
   */
  public float getVelocity() {
    return velocity;
  }


  /**
   * Sets the value of the 'velocity' field.
   * @param value the value to set.
   */
  public void setVelocity(float value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'externalTemperature' field.
   * @return The value of the 'externalTemperature' field.
   */
  public float getExternalTemperature() {
    return externalTemperature;
  }


  /**
   * Sets the value of the 'externalTemperature' field.
   * @param value the value to set.
   */
  public void setExternalTemperature(float value) {
    this.externalTemperature = value;
  }

  /**
   * Gets the value of the 'accelerometer' field.
   * @return The value of the 'accelerometer' field.
   */
  public java.util.List<java.lang.Float> getAccelerometer() {
    return accelerometer;
  }


  /**
   * Sets the value of the 'accelerometer' field.
   * @param value the value to set.
   */
  public void setAccelerometer(java.util.List<java.lang.Float> value) {
    this.accelerometer = value;
  }

  /**
   * Gets the value of the 'magneticField' field.
   * @return The value of the 'magneticField' field.
   */
  public java.util.List<java.lang.Float> getMagneticField() {
    return magneticField;
  }


  /**
   * Sets the value of the 'magneticField' field.
   * @param value the value to set.
   */
  public void setMagneticField(java.util.List<java.lang.Float> value) {
    this.magneticField = value;
  }

  /**
   * Creates a new Sensor RecordBuilder.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.Sensor.Builder newBuilder() {
    return new com.example.Sensor.Builder();
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.Sensor.Builder newBuilder(com.example.Sensor.Builder other) {
    if (other == null) {
      return new com.example.Sensor.Builder();
    } else {
      return new com.example.Sensor.Builder(other);
    }
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Sensor instance.
   * @param other The existing instance to copy.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.Sensor.Builder newBuilder(com.example.Sensor other) {
    if (other == null) {
      return new com.example.Sensor.Builder();
    } else {
      return new com.example.Sensor.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sensor instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sensor>
    implements org.apache.avro.data.RecordBuilder<Sensor> {

    private java.lang.CharSequence id;
    private float velocity;
    private float externalTemperature;
    private java.util.List<java.lang.Float> accelerometer;
    private java.util.List<java.lang.Float> magneticField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.Sensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.velocity)) {
        this.velocity = data().deepCopy(fields()[1].schema(), other.velocity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.externalTemperature)) {
        this.externalTemperature = data().deepCopy(fields()[2].schema(), other.externalTemperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.accelerometer)) {
        this.accelerometer = data().deepCopy(fields()[3].schema(), other.accelerometer);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.magneticField)) {
        this.magneticField = data().deepCopy(fields()[4].schema(), other.magneticField);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Sensor instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.Sensor other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.velocity)) {
        this.velocity = data().deepCopy(fields()[1].schema(), other.velocity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalTemperature)) {
        this.externalTemperature = data().deepCopy(fields()[2].schema(), other.externalTemperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accelerometer)) {
        this.accelerometer = data().deepCopy(fields()[3].schema(), other.accelerometer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.magneticField)) {
        this.magneticField = data().deepCopy(fields()[4].schema(), other.magneticField);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.Sensor.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.example.Sensor.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * @return The value.
      */
    public float getVelocity() {
      return velocity;
    }


    /**
      * Sets the value of the 'velocity' field.
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public com.example.Sensor.Builder setVelocity(float value) {
      validate(fields()[1], value);
      this.velocity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'velocity' field.
      * @return This builder.
      */
    public com.example.Sensor.Builder clearVelocity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalTemperature' field.
      * @return The value.
      */
    public float getExternalTemperature() {
      return externalTemperature;
    }


    /**
      * Sets the value of the 'externalTemperature' field.
      * @param value The value of 'externalTemperature'.
      * @return This builder.
      */
    public com.example.Sensor.Builder setExternalTemperature(float value) {
      validate(fields()[2], value);
      this.externalTemperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'externalTemperature' field has been set.
      * @return True if the 'externalTemperature' field has been set, false otherwise.
      */
    public boolean hasExternalTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'externalTemperature' field.
      * @return This builder.
      */
    public com.example.Sensor.Builder clearExternalTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'accelerometer' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getAccelerometer() {
      return accelerometer;
    }


    /**
      * Sets the value of the 'accelerometer' field.
      * @param value The value of 'accelerometer'.
      * @return This builder.
      */
    public com.example.Sensor.Builder setAccelerometer(java.util.List<java.lang.Float> value) {
      validate(fields()[3], value);
      this.accelerometer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'accelerometer' field has been set.
      * @return True if the 'accelerometer' field has been set, false otherwise.
      */
    public boolean hasAccelerometer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'accelerometer' field.
      * @return This builder.
      */
    public com.example.Sensor.Builder clearAccelerometer() {
      accelerometer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'magneticField' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getMagneticField() {
      return magneticField;
    }


    /**
      * Sets the value of the 'magneticField' field.
      * @param value The value of 'magneticField'.
      * @return This builder.
      */
    public com.example.Sensor.Builder setMagneticField(java.util.List<java.lang.Float> value) {
      validate(fields()[4], value);
      this.magneticField = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'magneticField' field has been set.
      * @return True if the 'magneticField' field has been set, false otherwise.
      */
    public boolean hasMagneticField() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'magneticField' field.
      * @return This builder.
      */
    public com.example.Sensor.Builder clearMagneticField() {
      magneticField = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sensor build() {
      try {
        Sensor record = new Sensor();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.velocity = fieldSetFlags()[1] ? this.velocity : (java.lang.Float) defaultValue(fields()[1]);
        record.externalTemperature = fieldSetFlags()[2] ? this.externalTemperature : (java.lang.Float) defaultValue(fields()[2]);
        record.accelerometer = fieldSetFlags()[3] ? this.accelerometer : (java.util.List<java.lang.Float>) defaultValue(fields()[3]);
        record.magneticField = fieldSetFlags()[4] ? this.magneticField : (java.util.List<java.lang.Float>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sensor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sensor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sensor>
    READER$ = (org.apache.avro.io.DatumReader<Sensor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeFloat(this.velocity);

    out.writeFloat(this.externalTemperature);

    if (this.accelerometer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.accelerometer.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.Float e0: this.accelerometer) {
        actualSize0++;
        out.startItem();
        out.writeFloat(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.magneticField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.magneticField.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Float e1: this.magneticField) {
        actualSize1++;
        out.startItem();
        out.writeFloat(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.velocity = in.readFloat();

      this.externalTemperature = in.readFloat();

      if (in.readIndex() != 1) {
        in.readNull();
        this.accelerometer = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.Float> a0 = this.accelerometer;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("accelerometer").schema().getTypes().get(1));
          this.accelerometer = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readFloat();
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.magneticField = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.Float> a1 = this.magneticField;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.Float>((int)size1, SCHEMA$.getField("magneticField").schema().getTypes().get(1));
          this.magneticField = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readFloat();
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.velocity = in.readFloat();
          break;

        case 2:
          this.externalTemperature = in.readFloat();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accelerometer = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Float> a0 = this.accelerometer;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("accelerometer").schema().getTypes().get(1));
              this.accelerometer = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readFloat();
                a0.add(e0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.magneticField = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.Float> a1 = this.magneticField;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.Float>((int)size1, SCHEMA$.getField("magneticField").schema().getTypes().get(1));
              this.magneticField = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readFloat();
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










